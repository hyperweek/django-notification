=====
Usage
=====

Integrating notification support into your app is a simple three-step
process:

    1. Create your notice types
    2. Create your notice templates
    3. Send notifications


Creating Notice Types
=====================

You need to call :py:func:`NoticeType.objects.create_notice_type(label,
display, description)` once to create the notice types for your
application in the database. ``label`` is just the internal shortname
that will be used for the type, ``display`` is what the user will see as
the name of the notification type and `description` is a short
description.

For example::

    from notification.models import NoticeType
    NoticeType.objects.create_notice_type("friends_invite", "Invitation Received", "you have received an invitation")

One good way to automatically do this notice type creation is in a
:py:mod:`management.py` file for your app, attached to the syncdb signal.
Here is an example::

    from django.conf import settings
    from django.utils.translation import ugettext_noop as _

    if "notification" in settings.INSTALLED_APPS:
        from notification import models as notification_app

        def create_notice_types(app, created_models, verbosity, **kwargs):
            from notification.models import NoticeType

            NoticeType.objects.create_notice_type("friends_invite", _("Invitation Received"), _("you have received an invitation"))
            NoticeType.objects.create_notice_type("friends_accept", _("Acceptance Received"), _("An invitation you sent has been accepted"))

        signals.post_syncdb.connect(create_notice_types, sender=notification_app)
    else:
        print "Skipping creation of NoticeTypes as notification app not found"

Notice that the code is wrapped in a conditional clause so if django-
notification is not installed, your app will proceed anyway.

Note that the display and description arguments are marked for
translation by using ugettext_noop. That will enable you to use Django's
:command:`makemessages` management command and use django-notification's
i18n capabilities.


Notification templates
======================

There are four different templates that can to be written for the actual content of the notices:

    * :file:`short.txt` is a very short, text-only version of the notice (suitable for things like email subjects)

    * :file:`full.txt` is a longer, text-only version of the notice (suitable for things like text-based email bodies)

    * :file:`full.html` is a long, html version of the notice (suitable for things like html-based email bodies)

    * :file:`notice.html` is a short, html version of the notice, displayed in a user's notice list on the website

Each of these should be put in a directory on the template path called :file:`notification/<notice_type_label>/<template_name>`.
If any of these are missing, a default would be used. In practice, :file:`notice.html` and :file:`full.txt` should be provided at a minimum.

For example, :file:`notification/friends_invite/notice.html` might contain:

.. code-block:: django

    {% load i18n %}{% url invitations as invitation_page %}{% url profile_detail username=invitation.from_user.username as user_url %}
    {% blocktrans with invitation.from_user as invitation_from_user %}<a href="{{ user_url }}">{{ invitation_from_user }}</a> has requested to add you as a friend (see <a href="{{ invitation_page }}">invitations</a>){% endblocktrans %}

and :file:`notification/friends_invite/full.txt` might contain:

.. code-block:: django

    {% load i18n %}{% url invitations as invitation_page %}{% blocktrans with invitation.from_user as invitation_from_user %}{{ invitation_from_user }} has requested to add you as a friend. You can accept their invitation at:

    http://{{ current_site }}{{ invitation_page }}
    {% endblocktrans %}

The context variables are provided when sending the notification.


Sending Notification
====================

There are two different ways of sending out notifications. We have support
for blocking and non-blocking methods of sending notifications. The most
simple way to send out a notification, for example::

    from notification.api import send
    send([to_user], "friends_invite", {"from_user": from_user})

One thing to note is that ``send`` is a proxy around ``notify``. They both have the same signature::

    from notification.tasks import notify
    notify(users, label, extra_context, on_site)


send
----

A basic wrapper around :py:func:`notification.tasks.notify`. This honors
a global flag :py:const:`NOTIFICATION_USE_QUEUE` that helps determine
whether all calls should be queued or not. A per call
:py:attr:`use_queue` keyword argument can be used to override the
default global behavior.

.. function:: send
   :module: notification.api

.. versionchanged:: 0.3
   The ``from_email``, ``headers`` and ``use_queue`` arguments were added.

:py:attr:`users`
    An iterable of ``User`` objects to send the notification to.

:py:attr:`label`
    The exact same label you used in the previous step to identify the
    notice type.

:py:attr:`extra_content`
    A dictionary to add custom context entries to the template used to
    render to notification. Optional.

:py:attr:`on_site`
    A boolean flag to determine whether a ``Notice`` object is created
    in the database. Defaults to ``True``.

:py:attr:`sender`
    A ``User`` object that might be the actor triggering the notification.
    Optionnal.

:py:attr:`from_email`
    The sender's address. Both fred@example.com and Fred
    <fred@example.com> forms are legal. If omitted, the
    DEFAULT_FROM_EMAIL setting is used.

:py:attr:`headers`
    A dictionary of extra headers to put on the message. The keys are
    the header name, values are the header values. It's up to the caller
    to ensure header names and values are in the correct format for an
    email message. Optionnal.

:py:attr:`use_queue`
    A booelan that overrides the global settings
    :py:const:`NOTIFICATION_USE_QUEUE`. This enables you to override on
    a per call basis the blocking/queuing behavior of the notification
    been sent. Optionnal.


notify
------

.. function:: notify
   :module: notification.tasks

A celery task to send a notification to a list of users. Same parameters than :py:func:`notification.api.send` excepts the :py:attr:`use_queue` flag which is
not used.

.. seealso::

    To globally control the blocking/queuing behaviour of the task,
    refer to the CELERY_ALWAYS_EAGER_ settings.


.. _CELERY_ALWAYS_EAGER: http://docs.celeryproject.org/en/latest/configuration.html?highlight=celery_always_eager#std:setting-CELERY_ALWAYS_EAGER

``send_now`` vs. ``queue`` vs. ``send``
---------------------------------------


``send_now``
~~~~~~~~~~~~

.. function:: send_now
   :module: notification.models

.. deprecated:: 0.3
    Use :py:func:`notification.api.send` instead.

This is a blocking call that will check each user for elgibility of the
notice and actually peform the send.


``queue``
~~~~~~~~~

.. function:: queue
   :module: notification.models

.. deprecated:: 0.3
    Use :py:func:`notification.api.send` instead.

This is a non-blocking call that will queue the call to
:py:func:`notification.api.send` to be executed at a later time.


``send``
~~~~~~~~

.. function:: send
   :module: notification.models

.. deprecated:: 0.3
    Use :py:func:`notification.api.send` instead.

A proxy around :py:func:`notification.api.send` for
backward-comptatibility reason.


Optional notification support
-----------------------------

In case you want to use django-notification in your reusable app, you can
wrap the import of django-notification in a conditional clause that tests
if it's installed before sending a notice. As a result your app or
project still works without notification.

For example::

    from django.conf import settings

    if "notification" in settings.INSTALLED_APPS:
        from notification import api as notification
    else:
        notification = None

and then, later::

    if notification:
        notification.send([to_user], "friends_invite", {"from_user": from_user})
